

module BNFC.Backend.Python.AbsPython where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Entity
    = Import Ident
    | From Ident
    | Class Ident Inherit
    | For [Entity] Entity
    | If Entity
    | Elif Entity
    | Else
    | In Entity Entity
    | Try
    | Except
    | With Entity
    | Gt Entity Entity
    | Mul Entity Entity
    | Equals Entity Entity
    | NoEquals Entity Entity
    | Plus Entity Entity
    | Minus Entity Entity
    | IsInstance
    | PyComment String
    | Formatting String Entity
    | Raise Entity
    | Method Entity
    | IndentedBlock [Entity]
    | EmptyEntity
    | Init
    | Enter
    | Exit
    | ClassField
    | NameField
    | Super
    | AnyMethod Ident
    | Assignment [Entity] [Entity]
    | Return Entity
    | Pass
    | Function Entity [Entity]
    | Qualified [Name]
    | Argument Ident ArgType
    | Self
    | Entry Entity Entity
    | Dictionary [Entity]
    | SquareBracketAccess Entity Array
    | Id Ident
    | NothingPython
  deriving (Eq, Ord, Show, Read)

data Inherit = YesInherit Ident | NoInherit
  deriving (Eq, Ord, Show, Read)

data ArgType = YesType Ident | NoType
  deriving (Eq, Ord, Show, Read)

data Array = YesArray Entity | NoArray
  deriving (Eq, Ord, Show, Read)

data Name = Name Entity
  deriving (Eq, Ord, Show, Read)

