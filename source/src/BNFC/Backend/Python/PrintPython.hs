{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module BNFC.Backend.Python.PrintPython where

-- pretty-printer generated by the BNF converter

import BNFC.Backend.Python.AbsPython
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showString "") . dropWhile isSpace
  space t = showString t . (\s -> case s of
                                "" -> "" 
                                '.':' ':q -> '.':q
                                _ -> ' ':s)

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))



instance Print Entity where
  prt i e = case e of
    Import id -> prPrec i 0 (concatD [doc (showString "import"), prt 0 id])
    From id -> prPrec i 0 (concatD [doc (showString "from"), prt 0 id, doc (showString "import"), doc (showString "*")])
    Class id inherit -> prPrec i 0 (concatD [doc (showString "class"), prt 0 id, prt 0 inherit, doc (showString ":")])
    For entitys entity -> prPrec i 0 (concatD [doc (showString "for"), prt 0 entitys, doc (showString "in"), prt 0 entity, doc (showString ":")])
    If entity -> prPrec i 0 (concatD [doc (showString "if"), prt 0 entity, doc (showString ":")])
    Elif entity -> prPrec i 0 (concatD [doc (showString "elif"), prt 0 entity, doc (showString ":")])
    Else -> prPrec i 0 (concatD [doc (showString "else"), doc (showString ":")])
    In entity1 entity2 -> prPrec i 0 (concatD [prt 0 entity1, doc (showString "in"), prt 0 entity2])
    Try -> prPrec i 0 (concatD [doc (showString "try"), doc (showString ":")])
    Except -> prPrec i 0 (concatD [doc (showString "except"), doc (showString ":")])
    With entity -> prPrec i 0 (concatD [doc (showString "with"), prt 0 entity, doc (showString ":")])
    Gt entity1 entity2 -> prPrec i 0 (concatD [prt 0 entity1, doc (showString ">"), prt 0 entity2])
    Mul entity1 entity2 -> prPrec i 0 (concatD [prt 0 entity1, doc (showString "*"), prt 0 entity2])
    Equals entity1 entity2 -> prPrec i 0 (concatD [prt 0 entity1, doc (showString "=="), prt 0 entity2])
    NoEquals entity1 entity2 -> prPrec i 0 (concatD [prt 0 entity1, doc (showString "!="), prt 0 entity2])
    Plus entity1 entity2 -> prPrec i 0 (concatD [prt 0 entity1, doc (showString "+"), prt 0 entity2])
    Minus entity1 entity2 -> prPrec i 0 (concatD [prt 0 entity1, doc (showString "-"), prt 0 entity2])
    IsInstance -> prPrec i 0 (concatD [doc (showString "isinstance")])
    PyComment str -> prPrec i 0 (concatD [doc (showString "#"), prt 0 str])
    Formatting str entity -> prPrec i 0 (concatD [prt 0 str, doc (showString "%"), prt 0 entity])
    Raise entity -> prPrec i 0 (concatD [doc (showString "raise"), prt 0 entity])
    Method entity -> prPrec i 0 (concatD [doc (showString "def"), prt 0 entity, doc (showString ":")])
    IndentedBlock entitys -> prPrec i 0 (concatD [prt 0 entitys])
    EmptyEntity -> prPrec i 0 (concatD [])
    Init -> prPrec i 0 (concatD [doc (showString "__init__")])
    Enter -> prPrec i 0 (concatD [doc (showString "__enter__")])
    Exit -> prPrec i 0 (concatD [doc (showString "__exit__")])
    ClassField -> prPrec i 0 (concatD [doc (showString "__class__")])
    NameField -> prPrec i 0 (concatD [doc (showString "__name__")])
    Super -> prPrec i 0 (concatD [doc (showString "super")])
    AnyMethod id -> prPrec i 0 (concatD [prt 0 id])
    Assignment entitys1 entitys2 -> prPrec i 0 (concatD [prt 0 entitys1, doc (showString "="), prt 0 entitys2])
    Return entity -> prPrec i 0 (concatD [doc (showString "return"), prt 0 entity])
    Pass -> prPrec i 0 (concatD [doc (showString "pass")])
    Function entity entitys -> prPrec i 0 (concatD [prt 0 entity, doc (showString "("), prt 0 entitys, doc (showString ")")])
    Qualified names -> prPrec i 0 (concatD [prt 0 names])
    Argument id argtype -> prPrec i 0 (concatD [prt 0 id, prt 0 argtype])
    Self -> prPrec i 0 (concatD [doc (showString "self")])
    Entry entity1 entity2 -> prPrec i 0 (concatD [prt 0 entity1, doc (showString ":"), prt 0 entity2, doc (showString ",")])
    Dictionary entitys -> prPrec i 0 (concatD [prt 0 entitys])
    SquareBracketAccess entity array -> prPrec i 0 (concatD [prt 0 entity, prt 0 array])
    Id id -> prPrec i 0 (concatD [prt 0 id])
    NothingPython -> prPrec i 0 (concatD [])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Inherit where
  prt i e = case e of
    YesInherit id -> prPrec i 0 (concatD [doc (showString "("), prt 0 id, doc (showString ")")])
    NoInherit -> prPrec i 0 (concatD [])

instance Print ArgType where
  prt i e = case e of
    YesType id -> prPrec i 0 (concatD [doc (showString ":"), prt 0 id])
    NoType -> prPrec i 0 (concatD [])

instance Print Array where
  prt i e = case e of
    YesArray entity -> prPrec i 0 (concatD [doc (showString "["), prt 0 entity, doc (showString "]")])
    NoArray -> prPrec i 0 (concatD [])

instance Print Name where
  prt i e = case e of
    Name entity -> prPrec i 0 (concatD [prt 0 entity])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString "."), prt 0 xs])
  --prtList _ (x:xs) = (concatD [prt 0 x, doc (showString "."), prt 0 xs])

