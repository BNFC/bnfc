{-
    BNF Converter: Python Language internal definition for using its abstract 
    syntax
    Copyright (C) 2016  Author: Gabriele Paganelli

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-}

Import . Entity ::= "import" Ident;
From . Entity ::= "from" Ident "import" "*";

Class . Entity ::= "class" Ident Inherit ":";
YesInherit . Inherit ::=  "(" Ident ")";
NoInherit . Inherit ::= ;

For . Entity ::= "for" [Entity] "in" Entity ":";

If . Entity ::= "if" Entity ":";
Elif . Entity ::= "elif" Entity ":";
Else . Entity ::= "else" ":";
In . Entity ::= Entity "in" Entity;

Try . Entity ::= "try" ":";
Except . Entity ::= "except" ":";
With . Entity ::= "with" Entity ":";

Gt . Entity ::= Entity ">" Entity;
Mul . Entity ::= Entity "*" Entity;
Equals . Entity ::= Entity "==" Entity;
NoEquals . Entity ::= Entity "!=" Entity;
Plus . Entity ::= Entity "+" Entity;
Minus . Entity ::= Entity "-" Entity;

IsInstance . Entity ::= "isinstance";

PyComment . Entity ::= "#" String;
Formatting . Entity ::= String "%" Entity;

Raise . Entity ::= "raise" Entity;

Method . Entity ::= "def" Entity ":";
IndentedBlock . Entity ::= [Entity];
EmptyEntity . Entity ::= ;
Init . Entity ::= "__init__";
Enter . Entity ::= "__enter__";
Exit . Entity ::= "__exit__";
ClassField . Entity ::= "__class__";
NameField . Entity ::= "__name__";
Super . Entity ::= "super";
AnyMethod. Entity  ::= Ident;

Assignment . Entity ::= [Entity] "=" [Entity];
Return . Entity ::= "return" Entity;
Pass . Entity ::= "pass";
Function . Entity ::= Entity "(" [Entity] ")";
Qualified . Entity ::= [Name]; 
Argument . Entity ::= Ident ArgType;
Self . Entity ::= "self";
Entry . Entity ::= Entity ":" Entity ",";
Dictionary . Entity ::= [Entity];

YesType . ArgType ::= ":" Ident;
NoType . ArgType ::= ;
SquareBracketAccess . Entity ::= Entity Array;
Id . Entity ::= Ident ;

YesArray . Array ::= "[" Entity "]";
NoArray . Array ::=;

Name . Name ::= Entity;

NothingPython . Entity ::= ;

separator Name ".";
separator Entity "," ;
