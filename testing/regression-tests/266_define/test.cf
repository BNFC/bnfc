-- #266 "define" pragma

terminator Stm ""                        ;

SInts.    Stm   ::= "integers"   Ints    ;
SChars.   Stm   ::= "chars"      Chars   ;
SExp.     Stm   ::= "expression" Exp     ;
SList.    Stm   ::= "list" [Exp]         ;
nilSlist. Stm   ::= "nil"                ;

define    nilSlist = SList []            ;

EHalf.    Exp2  ::= "1/2"                ;
EDouble.  Exp2  ::= Double               ;
eSqrt.    Exp1  ::= "sqrt" Exp1          ;
eSqrt4.   Exp1  ::= "sqrt4" Exp1         ;
EPower.   Exp   ::= Exp1 "**" Exp        ;

coercions Exp 2                          ;
separator Exp ","                        ;

define    eSqrt  e = EPower e EHalf      ;
define    eSqrt4 e = eSqrt (eSqrt e)     ;

-- #285 "define" pragma involving token categories

INil.     Ints ::=                       ;
iSg.      Ints ::= Integer               ;
ISnoc.    Ints ::= Ints "," Integer      ;

define    iSg i = ISnoc INil i           ;

CNil.     Chars ::=                      ;
cSg.      Chars ::= Char                 ;
CSnoc.    Chars ::= Chars Dot Char       ;

define    cSg c = CSnoc CNil (Dot ".") c ;

token     Dot '.'                        ;
